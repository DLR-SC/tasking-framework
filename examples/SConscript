#!/usr/bin/env python

import os

Import('envGlobal')

env = envGlobal.Clone()

if 'FORMAT' in envGlobal:
    os.system('clang-format -style=file -i *.cpp *.h customPlatform/*.cpp customPlatform/*.h')
  
env.Append(LIBS=['tasking', 'pthread'])
# Append libs to special targets 
if env['PLATFORM'] == 'outpost':
    env.Append(LIBS=['outpost_time', 'outpost_rtos'])
    if env['OS'] == 'posix':
    	env.Append(LIBS=['rt'])

# Garbage collection at linkage
env.Append(CXXFLAGS=['-Wl,--gc-sections'])

programs = [env.Program('periodicTaskExample', env.Glob('periodicTaskExample.cpp'))]
programs.append(env.Program('channelExample', env.Glob('channelExample.cpp')))
programs.append(env.Program('ioChannelExample', env.Glob('ioChannelExample.cpp')))
programs.append(env.Program('timeOutExample', env.Glob('timeOutExample.cpp')))
programs.append(env.Program('multiParallelExample', env.Glob('multiparallelExample.cpp')))
programs.append(env.Program('filterExample', env.Glob('filterExample.cpp')))

envGlobal.Alias('examples', programs)
