#!/usr/bin/env python

import os

Import('envGlobal')

envGlobal.Append(CPPPATH=[os.path.abspath('../include')])

if envGlobal['PLATFORM'] == 'none':
    envGlobal.Append(CPPPATH=[os.path.abspath('../arch/none')])
elif envGlobal['PLATFORM'] == 'linux':
	envGlobal.Append(CPPPATH=[os.path.abspath('../arch/linux')])
	envGlobal.Append(CXXFLAGS=['-pthread'])
elif envGlobal['PLATFORM'] == 'outpost':
    envGlobal.Append(CPPPATH=[os.path.abspath('../arch/outpost')])
# TODO Implement cpp11
# elif envGlobal['PLATFORM'] == 'cpp11':
#      envGlobal.Append(CPPPATH=[os.path.abspath('../arch/cpp11')])

env = envGlobal.Clone()

files = env.Glob('*.cpp')
if envGlobal['PLATFORM'] == 'none':
    files += env.Glob('../arch/none/*.cpp')
elif envGlobal['PLATFORM'] == 'linux':
    files += env.Glob('../arch/linux/*.cpp')
elif envGlobal['PLATFORM'] == 'outpost':
    files += env.Glob('../arch/outpost/*.cpp')
    env.Append(LIBS=['outpost_rtos', 'outpost_time'])
# TODO Implement cpp11 
# elif envGlobal['PLATFORM'] == 'cpp11':
#     files += env.Glob('../arch/cpp11/*.cpp')

envGlobal.Append(objects={'tasking': files})

# Set flags to decrease static linkage size for garbage collection by linker
env.Append(CXXFLAGS=['-ffunction-sections'])

if 'FORMAT' in envGlobal:
  print( "Format source files.")
  os.system('clang-format -style=file -i *.cpp ../include/*.h ../include/impl/*.h ../arch/*/*.cpp ../arch/*/*.h')

library = env.StaticLibrary(target = 'tasking', source = files)
envGlobal.Install(envGlobal['LIBINSTALLPATH'], library)
